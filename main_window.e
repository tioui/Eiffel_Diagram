note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2018/1/31 8:13:18 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Initialization

	create_interface_objects
			-- <Precursor>
		local
			l_pixel_format:CAIRO_PIXEL_FORMAT
		do
				-- Create main container.
			create main_container
			create drawing_area
			create l_pixel_format.make_argb32
			create surface.make (l_pixel_format, 2000, 2000)
			create diagram.make_from_image_surface (surface)
			create diagram_pixel_buffer.make
			initialize_diagram
		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

			build_main_container
			extend (main_container)


				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)

			drawing_area.expose_actions.extend (agent update_drawing_area)
		end

	initialize_diagram
			-- Initialization of the `diagram'
		local
			l_box:DIA_BOX
			l_text:DIA_TEXT
			l_text_box:DIA_TEXT_BOX
			l_link:DIA_LINK
			l_marker:DIA_ARROW_MARKER
		do
			create l_box
			diagram.add_element (l_box)
			l_box.set_x (50)
			l_box.set_y (50)
			l_box.set_height (50)
			l_box.set_width (50)
			l_box.set_fill_color (1.0, 0.0, 0.0, 0.5)
			create l_text.make ("Sans 20")
			diagram.add_element (l_text)
			l_text.set_text ("Bonjour%NMonde")
			l_text.align_vertical_center
			l_text.align_horizontal_right
			l_text.align_text_center
			l_text.x := 100
			l_text.y := 100
			l_text.set_size (50)
			l_text.set_fill_color (0.0, 1.0, 0.0, 0.5)
			create l_text_box.make ("Sans 15")
			diagram.add_element (l_text_box)
			l_text_box.x := 150
			l_text_box.y := 200
			l_text_box.width := 200
			l_text_box.minimum_height := 100
			l_text_box.text.set_text ("Eum voluptatem iure odio exercitationem aut blanditiis cupiditate consequatur.%N%NVeniam omnis sed at et sapiente omnis commodi.")

			create l_link.make(l_box, l_text_box)
			l_link.set_stroke_color (1, 0, 0, 1)
			l_link.set_stroke_size (10)
			diagram.add_link (l_link)

			create l_marker.make (20, 30)
			l_link.set_end_marker (l_marker)
			create l_marker.make (20, 30)
			l_link.set_start_marker (l_marker)

			create l_box
			l_box.x := 150
			l_box.y := 50
			l_box.width := 50
			l_box.height := 50
			diagram.add_element (l_box)


			redraw_diagram
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

feature {NONE} -- Implementation

	drawing_area:EV_DRAWING_AREA
			-- Widget to draw the `diagram'

	surface:CAIRO_SURFACE_IMAGE
			-- The {CAIRO_SURFACE} to draw the `diagram'

	diagram:DIA_DIAGRAM
			-- The diagram controler

	diagram_pixel_buffer:EV_PIXEL_BUFFER_CAIRO
			-- The {EV_PIXEL_BUFFER} used to copy the `diagram' to the `drawing_area'

	update_drawing_area(a_x, a_y, a_width, a_height: INTEGER)
			-- Used when the `drawing_area' have to be redraw
		do
			drawing_area.draw_sub_pixel_buffer (a_x, a_y, diagram_pixel_buffer, create {EV_RECTANGLE}.make (a_x, a_y, a_width, a_height))
		end

	redraw_diagram
			-- Redraw the `diagram' to the `diagram_pixel_buffer'
		do
			diagram.draw
			create diagram_pixel_buffer.make_from_cairo_surface (surface)
		end

	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window).

	build_main_container
			-- Populate `main_container'.
		do
			main_container.extend (drawing_area)
		ensure
			main_container_created: main_container /= Void
		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING = "diagram"
			-- Title of the window.

	Window_width: INTEGER = 400
			-- Initial width for this window.

	Window_height: INTEGER = 400
			-- Initial height for this window.

end
